[{"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/index.js":"1","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/reportWebVitals.js":"2","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/App.js":"3","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/lobby/ChatLobby.jsx":"4","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/sidebar/Sidebar.jsx":"5","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/TeamChat.jsx":"6","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/getters.js":"7","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/ChatMenu.jsx":"8","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/sidebar/sidebaroption/SidebarOption.jsx":"9","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/logo/Logo.jsx":"10","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/data/users.js":"11","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/data/channels.js":"12","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/message/Message.jsx":"13","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/channelDescription/ChannelDescription.jsx":"14","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/toggle.js":"15","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/toEmoji.js":"16","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/userIcon/UserIcon.jsx":"17","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/ranndomColorGenerator.js":"18","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/PrivateChat.jsx":"19","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/panelheader/PanelHeader.jsx":"20","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/publicChannel/Channel.jsx":"21","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/privateChannel/PrivateChannel.jsx":"22","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/Popup/Popup.jsx":"23","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/Popup/AddChannelPopup/AddChannelPopup.jsx":"24","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx":"25"},{"size":605,"mtime":1658742437216,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1657431595449,"results":"28","hashOfConfig":"27"},{"size":3203,"mtime":1659007903512,"results":"29","hashOfConfig":"27"},{"size":1439,"mtime":1658924895049,"results":"30","hashOfConfig":"27"},{"size":2030,"mtime":1657431595449,"results":"31","hashOfConfig":"27"},{"size":2224,"mtime":1658924959364,"results":"32","hashOfConfig":"27"},{"size":829,"mtime":1658237322713,"results":"33","hashOfConfig":"27"},{"size":2856,"mtime":1658923397122,"results":"34","hashOfConfig":"27"},{"size":493,"mtime":1657431595449,"results":"35","hashOfConfig":"27"},{"size":473,"mtime":1657431595449,"results":"36","hashOfConfig":"27"},{"size":459,"mtime":1657544287715,"results":"37","hashOfConfig":"27"},{"size":3206,"mtime":1658238988505,"results":"38","hashOfConfig":"27"},{"size":636,"mtime":1658321399867,"results":"39","hashOfConfig":"27"},{"size":2203,"mtime":1658923729007,"results":"40","hashOfConfig":"27"},{"size":270,"mtime":1658302667479,"results":"41","hashOfConfig":"27"},{"size":368,"mtime":1658923207428,"results":"42","hashOfConfig":"27"},{"size":403,"mtime":1658236939352,"results":"43","hashOfConfig":"27"},{"size":213,"mtime":1658149739544,"results":"44","hashOfConfig":"27"},{"size":1510,"mtime":1658237283441,"results":"45","hashOfConfig":"27"},{"size":773,"mtime":1658315397699,"results":"46","hashOfConfig":"27"},{"size":1059,"mtime":1658923319262,"results":"47","hashOfConfig":"27"},{"size":741,"mtime":1658311814617,"results":"48","hashOfConfig":"27"},{"size":423,"mtime":1658652350914,"results":"49","hashOfConfig":"27"},{"size":4798,"mtime":1659008159662,"results":"50","hashOfConfig":"27"},{"size":1094,"mtime":1658924892885,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1fnkqsu",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"55"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"55"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/index.js",[],[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/reportWebVitals.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/App.js",["133","134"],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/lobby/ChatLobby.jsx",["135"],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/sidebar/Sidebar.jsx",["136"],[],"import React from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nimport \"./sidebar.css\"\n\nimport SidebarOption from \"./sidebaroption/SidebarOption\";\nimport Logo from \"../logo/Logo\";\n\nimport { AiOutlineHome, \n         AiOutlineMessage, \n         AiOutlineTeam, \n         AiOutlineComment, \n         AiOutlineRobot, \n         AiOutlineSend, \n         AiOutlineBarChart,\n         AiOutlineQuestionCircle, \n         AiOutlineApi} from \"react-icons/ai\";\n\n\nexport default function Sidebar() {\n\n    // const navigate = useNavigate();\n    // const navigateToChat = () => navigate.push('/chat');\n\n    return (\n        <div className=\"sidebar\">\n            <Logo></Logo>\n            <div className=\"options\">\n                {/* <SidebarOption size={25} color=\"#052B4D\" onClick={navigateToChat}> */}\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineHome/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineMessage/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineTeam/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineComment/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineRobot/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineSend/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineBarChart/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineQuestionCircle/>\n                </SidebarOption>\n\n                <SidebarOption size={25} color=\"#052B4D\">\n                    <AiOutlineApi/>\n                </SidebarOption>\n            </div>\n        </div>        \n    );\n}","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/TeamChat.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/getters.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/ChatMenu.jsx",["137","138","139","140"],[],"import React, { useState } from \"react\";\nimport { AiOutlineFileText, AiOutlineSmile, AiOutlineStar, AiOutlineUserAdd } from \"react-icons/ai\";\nimport { getOtherUserInfo } from \"../../api/logic/getters\";\nimport Message from \"../message/Message\";\nimport \"./chatmenu.css\";\n\nexport default function ChatMenu({ sendMessage, selectedChannel, setSelectedChannel, currentUser, isPrivate }) {\n\n    // const [messages, setMessages] = useState(selectedChannel.messages);\n\n    async function sendText(){\n        const text = document.querySelector(\"#message-area\").value;\n        \n        if(text !== \"\"){\n            const currentDate = new Date();\n            const timestamp = `${currentDate.getHours()}:${currentDate.getMinutes()}:${currentDate.getSeconds()}`;\n            \n            sendMessage(selectedChannel.name, currentUser.name, text);\n\n            document.querySelector(\"#message-area\").value = \"\";\n            setSelectedChannel(selectedChannel => {\n                const copyChannel = Object.assign({}, selectedChannel);\n                copyChannel.messages = [...[{text: text, senderId: currentUser.id, timestamp:timestamp}], ...copyChannel.messages];\n                return copyChannel;    \n            });\n            // try {\n            //     await connection.invoke(\"SendToRoom\", selectedChannel.name, text);\n            // } catch (err) {\n            //     console.error(err);\n            // }\n        }\n    }\n\n    async function receiveMessage(message){\n        console.log(message);\n    }\n\n    return(\n        <div className=\"chat-menu\">\n            <header>\n                <h1>{ isPrivate ? getOtherUserInfo(selectedChannel, currentUser.id).name : selectedChannel.name}</h1>\n            </header>\n            <div className=\"chat-field\">\n                <div className=\"messages\">\n                        {/* {selectedChannel.messages.map((message) => {\n                            return (\n                                <Message key={Math.random()*100} message={message} currentUser={currentUser} />\n                            )\n                        })} */}\n                </div>\n                <div className=\"messenger\">\n                    <textarea name=\"message\" id=\"message-area\" cols=\"30\" rows=\"1\" placeholder=\"Type your message\"></textarea>\n                    <div className=\"message-panel\">\n                        <div className=\"message-tools\">\n                            <AiOutlineFileText size={20} color=\"#6A7681\"></AiOutlineFileText>\n                            <AiOutlineUserAdd size={20} color=\"#6A7681\"></AiOutlineUserAdd>\n                            <AiOutlineSmile size={20} color=\"#6A7681\"></AiOutlineSmile>\n                        </div>\n                        <button onClick={sendText}>Send</button>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n   )\n}","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/sidebar/sidebaroption/SidebarOption.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/logo/Logo.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/data/users.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/data/channels.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/message/Message.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/channelDescription/ChannelDescription.jsx",["141","142","143","144"],[],"import React from \"react\";\nimport \"./channeldescription.css\";\nimport { togglePanel } from \"../../../api/logic/toggle\";\nimport toEmoji from \"../../../api/logic/toEmoji\";\nimport { AiOutlineDown, AiOutlinePlus } from \"react-icons/ai\";\nimport UserIcon from \"../../userIcon/UserIcon\";\nimport { getUserInfo, getOtherUserInfo } from \"../../../api/logic/getters\";\nimport PanelHeader from \"../../panelheader/PanelHeader\";\n\nexport default function ChannelDescription( {selectedChannel, currentUser} ) {\n        return(\n        <div className=\"channel-info\">\n                <div className=\"channel-display\">\n                    <div className=\"icon-wrapper\">\n                        {selectedChannel.name !== \"\" ? <h1>{toEmoji(selectedChannel.icon)}</h1> \n                        : <UserIcon userName={getOtherUserInfo(selectedChannel, currentUser.id).name}/>}\n                    </div>\n                    <div className=\"channel-title\">\n                        <h1>{selectedChannel.name !== \"\" ? selectedChannel.name : getOtherUserInfo(selectedChannel, currentUser.id).name}</h1>\n                    </div> \n                </div>\n                \n                {selectedChannel.name !== \"\" ?\n                <div className=\"members-list-panel\">\n                    \n                    <div className=\"member-panel\">\n                        {<PanelHeader\n                        title={\"Members\"}\n                        count={selectedChannel.roomUsers.length}\n                        panelWrapperClass={\".members-list\"}/>}\n                    </div>\n\n                    <div className=\"members-list\">\n                        {selectedChannel.roomUsers.map(member => {\n                            // const member = getUserInfo(memberId);\n                            return(\n                                <div className=\"member\">\n                                    <UserIcon key={member.id} userName={member.fullName}/>\n                                    <p className=\"member-name\">{member.fullName}</p>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n                : \"\"}\n        </div> \n\n\n        )\n}","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/toggle.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/toEmoji.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/userIcon/UserIcon.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/ranndomColorGenerator.js",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/PrivateChat.jsx",["145"],[],"import React from \"react\";\n\nimport \"./privatechat.css\";\n\nimport { getOtherUserInfo, getUserInfo } from \"../../api/logic/getters\";\n\nimport PanelHeader from \"../panelheader/PanelHeader\";\nimport PrivateChannel from \"./privateChannel/PrivateChannel\";\n\nexport default function PrivateChat({ currentUser, channels, selectedChannel, setSelectedChannel }){\n\n    const privateChannels = channels.filter(channel => channel.name === \"\");\n\n    return (\n        <div className=\"private-channel-panel\">\n            <PanelHeader\n            key={Math.random()*10000} \n            title={\"Private Channels\"} \n            count={privateChannels.length} \n            panelWrapperClass={\".private-channels\"} \n            onAddClick={null}/>\n            \n            {privateChannels.length !== 0 ? \n                <div className=\"private-channels\">\n                {\n                    privateChannels.map(channel => {\n                        const otherUser = getOtherUserInfo(channel, currentUser.id);\n                        return(\n                            <PrivateChannel\n                            key={otherUser.id}\n                            user={otherUser}\n                            channel={channel}\n                            selectedChannel={selectedChannel}\n                            setSelectedChannel={setSelectedChannel}\n                            />\n                        )\n                    })\n                }\n                </div> \n            : \"\"}\n\n            \n        </div>\n    );\n};\n","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/panelheader/PanelHeader.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/publicChannel/Channel.jsx",["146","147"],[],"import React from \"react\";\nimport \"./channel.css\";\nimport { IconContext } from \"react-icons\";\nimport { AiOutlineStar } from \"react-icons/ai\";\nimport toEmoji from \"../../../api/logic/toEmoji\";\n\nexport default function Channel({ channel, selectedChannel, selected, setSelectedChannel }) {\n\n    // console.log(`${channel.id} === ${selectedChannel.id} -> ${channel.id === selectedChannel.id}`);\n\n    const setSelectedChannelHandler = () => {\n        setSelectedChannel(channel);\n    } \n\n    return(\n        <div className=\"channel\" onClick={setSelectedChannelHandler}>\n            <div className=\"channel-selected\" data-selected={(channel.id === selectedChannel.id).toString()}>\n                <div className=\"channel-icon\">\n                    <p>{toEmoji(channel.icon)}</p>\n                </div>\n                <div className=\"channel-name\">{channel.name}</div>\n                {/* <div className=\"message-count\">{channel.messages.length.toString()}</div> */}\n                <div className=\"message-count\">0</div> \n            </div>\n        </div>\n    )\n}\n","/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/channel/privateChannel/PrivateChannel.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/Popup/Popup.jsx",[],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/Popup/AddChannelPopup/AddChannelPopup.jsx",["148","149"],[],"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx",["150","151","152"],[],{"ruleId":"153","severity":1,"message":"154","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":18},{"ruleId":"153","severity":1,"message":"157","line":81,"column":11,"nodeType":"155","messageId":"156","endLine":81,"endColumn":25},{"ruleId":"153","severity":1,"message":"158","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"159","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":21},{"ruleId":"153","severity":1,"message":"160","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":25},{"ruleId":"153","severity":1,"message":"161","line":2,"column":45,"nodeType":"155","messageId":"156","endLine":2,"endColumn":58},{"ruleId":"153","severity":1,"message":"162","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":15},{"ruleId":"153","severity":1,"message":"163","line":34,"column":20,"nodeType":"155","messageId":"156","endLine":34,"endColumn":34},{"ruleId":"153","severity":1,"message":"164","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":21},{"ruleId":"153","severity":1,"message":"165","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":23},{"ruleId":"153","severity":1,"message":"166","line":5,"column":25,"nodeType":"155","messageId":"156","endLine":5,"endColumn":38},{"ruleId":"153","severity":1,"message":"167","line":7,"column":10,"nodeType":"155","messageId":"156","endLine":7,"endColumn":21},{"ruleId":"153","severity":1,"message":"167","line":5,"column":28,"nodeType":"155","messageId":"156","endLine":5,"endColumn":39},{"ruleId":"153","severity":1,"message":"168","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":21},{"ruleId":"153","severity":1,"message":"161","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":23},{"ruleId":"153","severity":1,"message":"169","line":9,"column":10,"nodeType":"155","messageId":"156","endLine":9,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":26,"column":8,"nodeType":"172","endLine":26,"endColumn":10,"suggestions":"173"},{"ruleId":"153","severity":1,"message":"174","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":21},{"ruleId":"153","severity":1,"message":"154","line":4,"column":23,"nodeType":"155","messageId":"156","endLine":4,"endColumn":31},{"ruleId":"153","severity":1,"message":"175","line":4,"column":33,"nodeType":"155","messageId":"156","endLine":4,"endColumn":47},"no-unused-vars","'getUsers' is defined but never used.","Identifier","unusedVar","'recieveMessage' is assigned a value but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'useState' is defined but never used.","'AiOutlineStar' is defined but never used.","'Message' is defined but never used.","'receiveMessage' is defined but never used.","'togglePanel' is defined but never used.","'AiOutlineDown' is defined but never used.","'AiOutlinePlus' is defined but never used.","'getUserInfo' is defined but never used.","'IconContext' is defined but never used.","'channels' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array. If 'getAllUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["176"],"'getChannels' is defined but never used.","'getUserChannel' is defined but never used.",{"desc":"177","fix":"178"},"Update the dependencies array to be: [getAllUsers]",{"range":"179","text":"180"},[766,768],"[getAllUsers]"]