{"ast":null,"code":"var _jsxFileName = \"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport Sidebar from \"../sidebar/Sidebar\";\nimport ChatLobby from '../lobby/ChatLobby';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPage(_ref) {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  console.log(\"CURRENT USER ROOMS:\", currentUser.roomExistUsers);\n  const [channels, setChannels] = useState(currentUser.roomExistUsers); // const [users, setUsers] = useState(getUsers());\n\n  const [selectedChannel, setSelectedChannel] = useState({});\n  const [connection, setConnection] = useState();\n  console.log(\"Current user: \", currentUser);\n  useEffect(() => {\n    // declare the data fetching function\n    const connect = async () => {\n      try {\n        const connection = new HubConnectionBuilder().withUrl(`${URL}/chatHub`).configureLogging(LogLevel.Information).build();\n        console.log(\"SignalR Connected.\");\n        connection.on(\"AddChannel\", channel => console.log(channel));\n        connection.on(\"onError\", msg => console.log(msg));\n        connection.on(\"RecieveMessage\", message => {\n          console.log(\"RECIEVING MESSAGE: \", message, \"\\nCURRENT USER:\", currentUser);\n          const copyChannel = Object.assign({}, currentUser.roomExistUsers.filter(room => room.id === message.toRoomId)[0]);\n\n          if (copyChannel.messages !== null) {\n            copyChannel.messages.push(message);\n          } else {\n            copyChannel.messages = [message];\n          }\n\n          setChannels(channels => {\n            channels.map(channel => {\n              if (channel.id !== copyChannel.id) {\n                return channel;\n              } else {\n                return copyChannel;\n              }\n            });\n          });\n        });\n        connection.onclose(e => {\n          setConnection();\n        });\n        await connection.start();\n        setConnection(connection);\n      } catch (err) {\n        console.log(err);\n      }\n\n      ;\n    }; // call the function\n\n\n    connect() // make sure to catch any error\n    .catch(console.error);\n  }, []);\n\n  const createChannel = async (channel, user, members) => {\n    try {\n      await connection.invoke(\"CreateRoom\", channel, user, members);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const sendMessage = async (channel, user, message) => {\n    try {\n      await connection.invoke(\"SendToRoom\", channel, user, message);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getAllUsers = async () => {\n    try {\n      const data = await connection.invoke(\"GetAllUsers\");\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatLobby, {\n      currentUser: currentUser,\n      channels: channels,\n      setChannels: setChannels // users={users}\n      // setUsers={setUsers}\n      ,\n      selectedChannel: selectedChannel,\n      setSelectedChannel: setSelectedChannel,\n      createChannel: createChannel,\n      sendMessage: sendMessage,\n      getAllUsers: getAllUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatPage, \"CesSjSxVGwvNMa15PGjGlSE7pio=\");\n\n_c = ChatPage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","HubConnectionBuilder","LogLevel","Sidebar","ChatLobby","ChatPage","currentUser","console","log","roomExistUsers","channels","setChannels","selectedChannel","setSelectedChannel","connection","setConnection","connect","withUrl","URL","configureLogging","Information","build","on","channel","msg","message","copyChannel","Object","assign","filter","room","id","toRoomId","messages","push","map","onclose","e","start","err","catch","error","createChannel","user","members","invoke","sendMessage","getAllUsers","data"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx"],"sourcesContent":["import {React, useState, useEffect} from \"react\";\n\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\n\nimport Sidebar from \"../sidebar/Sidebar\";\nimport ChatLobby from '../lobby/ChatLobby';\n\nexport default function ChatPage( \n    {currentUser} ){\n\n    console.log(\"CURRENT USER ROOMS:\", currentUser.roomExistUsers);\n    const [channels, setChannels] = useState(currentUser.roomExistUsers);\n    // const [users, setUsers] = useState(getUsers());\n    const [selectedChannel, setSelectedChannel] = useState({});   \n    \n    const [connection, setConnection] = useState();\n    \n    console.log(\"Current user: \", currentUser);\n\n    useEffect(() => {\n        // declare the data fetching function\n        const connect = async () => {\n            try {\n                const connection = new HubConnectionBuilder()\n                .withUrl(`${URL}/chatHub`)\n                .configureLogging(LogLevel.Information)\n                .build();\n    \n                console.log(\"SignalR Connected.\");\n    \n                connection.on(\"AddChannel\", (channel) => console.log(channel));\n    \n                connection.on(\"onError\", (msg) => console.log(msg));\n\n                connection.on(\"RecieveMessage\", (message) => {\n                    console.log(\"RECIEVING MESSAGE: \", message, \"\\nCURRENT USER:\", currentUser);\n                    const copyChannel = Object.assign({}, currentUser.roomExistUsers.filter(room => room.id === message.toRoomId)[0]);\n                    if (copyChannel.messages !== null){\n                        copyChannel.messages.push(message);\n                    } else {\n                        copyChannel.messages = [message];\n                    }\n\n                    setChannels(channels => {\n                        channels.map(channel => {\n                            if (channel.id !== copyChannel.id){\n                                return channel;\n                            } else {\n                                return copyChannel;\n                            }\n                        })\n                    });\n                });\n\n                connection.onclose(e => {\n                    setConnection();\n                });\n                \n                await connection.start();\n                setConnection(connection);\n            } catch (err) {\n                console.log(err);\n            };\n        };\n      \n        // call the function\n        connect()\n          // make sure to catch any error\n          .catch(console.error);\n      }, [])\n\n    const createChannel = async (channel, user, members) => {\n        try {\n            await connection.invoke(\"CreateRoom\", channel, user, members);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    const sendMessage = async (channel, user, message) => {\n        try {\n          await connection.invoke(\"SendToRoom\", channel, user, message);\n        } catch (err) {\n          console.log(err);\n        }\n    }    \n\n    const getAllUsers = async () => {\n        try {\n            const data = await connection.invoke(\"GetAllUsers\");\n            return data;\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return(\n        <div className=\"page\">\n            <Sidebar/>\n            <ChatLobby \n            currentUser={currentUser}\n            channels={channels}\n            setChannels={setChannels}\n            // users={users}\n            // setUsers={setUsers}\n            selectedChannel={selectedChannel}\n            setSelectedChannel={setSelectedChannel}\n            createChannel={createChannel} \n            sendMessage={sendMessage}\n            getAllUsers={getAllUsers}/>\n        </div>\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}