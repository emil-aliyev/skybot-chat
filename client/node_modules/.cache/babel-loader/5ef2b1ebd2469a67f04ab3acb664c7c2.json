{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n// Not exported from index.\n\n/** @private */\nexport class AbortController {\n  constructor() {\n    this._isAborted = false;\n    this.onabort = null;\n  }\n\n  abort() {\n    if (!this._isAborted) {\n      this._isAborted = true;\n\n      if (this.onabort) {\n        this.onabort();\n      }\n    }\n  }\n\n  get signal() {\n    return this;\n  }\n\n  get aborted() {\n    return this._isAborted;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA,OAAM,MAAOA,eAAP,CAAsB;EAA5BC;IACY,kBAAsB,KAAtB;IACD,eAA+B,IAA/B;EAkBV;;EAhBUC,KAAK;IACR,IAAI,CAAC,KAAKC,UAAV,EAAsB;MAClB,KAAKA,UAAL,GAAkB,IAAlB;;MACA,IAAI,KAAKC,OAAT,EAAkB;QACd,KAAKA,OAAL;MACH;IACJ;EACJ;;EAES,IAANC,MAAM;IACN,OAAO,IAAP;EACH;;EAEU,IAAPC,OAAO;IACP,OAAO,KAAKH,UAAZ;EACH;;AAnBuB","names":["AbortController","constructor","abort","_isAborted","onabort","signal","aborted"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/node_modules/@microsoft/signalr/src/AbortController.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}