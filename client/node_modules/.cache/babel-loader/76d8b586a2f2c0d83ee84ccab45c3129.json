{"ast":null,"code":"import { channels } from '../data/channels';\nimport { users } from '../data/users';\nexport const getChannels = () => {\n  return channels;\n};\nexport const getUsers = () => {\n  return users;\n};\nexport const getUserChannel = (userId, channels) => {\n  const userChannels = [];\n  channels.forEach(channel => {\n    if (channel.members.includes(userId)) {\n      userChannels.push(channel);\n    }\n  });\n  return userChannels;\n};\nexport const getUserInfo = memberId => {\n  return users[memberId - 1];\n};\nexport const getMemebersInfoIn = channel => {\n  return channel.members.map(memberId => getUserInfo(memberId));\n};\nexport const getOtherUserInfo = (channel, currentUserId) => {\n  const otherUserId = channel.members.filter(member => member.id !== currentUserId)[0];\n  return getUserInfo(otherUserId);\n};","map":{"version":3,"names":["channels","users","getChannels","getUsers","getUserChannel","userId","userChannels","forEach","channel","members","includes","push","getUserInfo","memberId","getMemebersInfoIn","map","getOtherUserInfo","currentUserId","otherUserId","filter","member","id"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/logic/getters.js"],"sourcesContent":["import { channels } from '../data/channels';\nimport { users } from '../data/users';\n\n\nexport const getChannels = () => {return channels};\nexport const getUsers = () => {return users};\n\nexport const getUserChannel = (userId, channels) => {\n    const userChannels = [];\n\n    channels.forEach(channel => {\n        if (channel.members.includes(userId)) {\n            userChannels.push(channel);\n        }\n    });\n    \n    return userChannels\n};\n\nexport const getUserInfo = (memberId) => {\n    return users[memberId-1];\n};\n\nexport const getMemebersInfoIn = (channel) => {\n    return channel.members.map(memberId => getUserInfo(memberId));\n};\n\nexport const getOtherUserInfo = (channel, currentUserId) => {\n    const otherUserId = channel.members.filter(member => member.id !== currentUserId)[0];\n    return getUserInfo(otherUserId);\n};"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;EAAC,OAAOF,QAAP;AAAgB,CAA3C;AACP,OAAO,MAAMG,QAAQ,GAAG,MAAM;EAAC,OAAOF,KAAP;AAAa,CAArC;AAEP,OAAO,MAAMG,cAAc,GAAG,CAACC,MAAD,EAASL,QAAT,KAAsB;EAChD,MAAMM,YAAY,GAAG,EAArB;EAEAN,QAAQ,CAACO,OAAT,CAAiBC,OAAO,IAAI;IACxB,IAAIA,OAAO,CAACC,OAAR,CAAgBC,QAAhB,CAAyBL,MAAzB,CAAJ,EAAsC;MAClCC,YAAY,CAACK,IAAb,CAAkBH,OAAlB;IACH;EACJ,CAJD;EAMA,OAAOF,YAAP;AACH,CAVM;AAYP,OAAO,MAAMM,WAAW,GAAIC,QAAD,IAAc;EACrC,OAAOZ,KAAK,CAACY,QAAQ,GAAC,CAAV,CAAZ;AACH,CAFM;AAIP,OAAO,MAAMC,iBAAiB,GAAIN,OAAD,IAAa;EAC1C,OAAOA,OAAO,CAACC,OAAR,CAAgBM,GAAhB,CAAoBF,QAAQ,IAAID,WAAW,CAACC,QAAD,CAA3C,CAAP;AACH,CAFM;AAIP,OAAO,MAAMG,gBAAgB,GAAG,CAACR,OAAD,EAAUS,aAAV,KAA4B;EACxD,MAAMC,WAAW,GAAGV,OAAO,CAACC,OAAR,CAAgBU,MAAhB,CAAuBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcJ,aAA/C,EAA8D,CAA9D,CAApB;EACA,OAAOL,WAAW,CAACM,WAAD,CAAlB;AACH,CAHM"},"metadata":{},"sourceType":"module"}