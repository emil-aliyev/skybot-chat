{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\n\nexport class HttpConnection {\n  constructor(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._stopPromiseResolver = () => {};\n\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  async start(transferFormat) {\n    transferFormat = transferFormat || TransferFormat.Binary;\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n    this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n\n    if (this._connectionState !== \"Disconnected\"\n    /* Disconnected */\n    ) {\n      return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n    }\n\n    this._connectionState = \"Connecting\"\n    /* Connecting */\n    ;\n    this._startInternalPromise = this._startInternal(transferFormat);\n    await this._startInternalPromise; // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"Failed to start the HttpConnection before stop() was called.\";\n\n      this._logger.log(LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n\n      await this._stopPromise;\n      return Promise.reject(new Error(message));\n    } else if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n\n      this._logger.log(LogLevel.Error, message);\n\n      return Promise.reject(new Error(message));\n    }\n\n    this._connectionStarted = true;\n  }\n\n  send(data) {\n    if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    } // Transport will not be null if state is connected\n\n\n    return this._sendQueue.send(data);\n  }\n\n  async stop(error) {\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n\n      return Promise.resolve();\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n      return this._stopPromise;\n    }\n\n    this._connectionState = \"Disconnecting\"\n    /* Disconnecting */\n    ;\n    this._stopPromise = new Promise(resolve => {\n      // Don't complete stop() until stopConnection() completes.\n      this._stopPromiseResolver = resolve;\n    }); // stopInternal should never throw so just observe it.\n\n    await this._stopInternal(error);\n    await this._stopPromise;\n  }\n\n  async _stopInternal(error) {\n    // Set error as soon as possible otherwise there is a race between\n    // the transport closing and providing an error and the error from a close message\n    // We would prefer the close message error.\n    this._stopError = error;\n\n    try {\n      await this._startInternalPromise;\n    } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n    } // The transport's onclose will trigger stopConnection which will run our onclose event.\n    // The transport should always be set if currently connected. If it wasn't set, it's likely because\n    // stop was called during start() and start() failed.\n\n\n    if (this.transport) {\n      try {\n        await this.transport.stop();\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n\n        this._stopConnection();\n      }\n\n      this.transport = undefined;\n    } else {\n      this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n    }\n  }\n\n  async _startInternal(transferFormat) {\n    // Store the original base url and the access token factory since they may change\n    // as part of negotiating\n    let url = this.baseUrl;\n    this._accessTokenFactory = this._options.accessTokenFactory;\n\n    try {\n      if (this._options.skipNegotiation) {\n        if (this._options.transport === HttpTransportType.WebSockets) {\n          // No need to add a connection ID in this case\n          this.transport = this._constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n          // No fallback or negotiate in this case.\n\n          await this._startTransport(url, transferFormat);\n        } else {\n          throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n        }\n      } else {\n        let negotiateResponse = null;\n        let redirects = 0;\n\n        do {\n          negotiateResponse = await this._getNegotiationResponse(url); // the user tries to stop the connection when it is being started\n\n          if (this._connectionState === \"Disconnecting\"\n          /* Disconnecting */\n          || this._connectionState === \"Disconnected\"\n          /* Disconnected */\n          ) {\n            throw new Error(\"The connection was stopped during negotiation.\");\n          }\n\n          if (negotiateResponse.error) {\n            throw new Error(negotiateResponse.error);\n          }\n\n          if (negotiateResponse.ProtocolVersion) {\n            throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n          }\n\n          if (negotiateResponse.url) {\n            url = negotiateResponse.url;\n          }\n\n          if (negotiateResponse.accessToken) {\n            // Replace the current access token factory with one that uses\n            // the returned access token\n            const accessToken = negotiateResponse.accessToken;\n\n            this._accessTokenFactory = () => accessToken;\n          }\n\n          redirects++;\n        } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n\n        if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n          throw new Error(\"Negotiate redirection limit exceeded.\");\n        }\n\n        await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n      }\n\n      if (this.transport instanceof LongPollingTransport) {\n        this.features.inherentKeepAlive = true;\n      }\n\n      if (this._connectionState === \"Connecting\"\n      /* Connecting */\n      ) {\n        // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n        // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n        this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n\n        this._connectionState = \"Connected\"\n        /* Connected */\n        ;\n      } // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n      // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n      // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n\n    } catch (e) {\n      this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n\n      this._connectionState = \"Disconnected\"\n      /* Disconnected */\n      ;\n      this.transport = undefined; // if start fails, any active calls to stop assume that start will complete the stop promise\n\n      this._stopPromiseResolver();\n\n      return Promise.reject(e);\n    }\n  }\n\n  async _getNegotiationResponse(url) {\n    const headers = {};\n\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n\n      if (token) {\n        headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      }\n    }\n\n    const [name, value] = getUserAgentHeader();\n    headers[name] = value;\n\n    const negotiateUrl = this._resolveNegotiateUrl(url);\n\n    this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n\n    try {\n      const response = await this._httpClient.post(negotiateUrl, {\n        content: \"\",\n        headers: { ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      });\n\n      if (response.statusCode !== 200) {\n        return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n      }\n\n      const negotiateResponse = JSON.parse(response.content);\n\n      if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n        // Negotiate version 0 doesn't use connectionToken\n        // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n        negotiateResponse.connectionToken = negotiateResponse.connectionId;\n      }\n\n      return negotiateResponse;\n    } catch (e) {\n      let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n\n      if (e instanceof HttpError) {\n        if (e.statusCode === 404) {\n          errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n        }\n      }\n\n      this._logger.log(LogLevel.Error, errorMessage);\n\n      return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n    }\n  }\n\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n\n  async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n\n    if (this._isITransport(requestedTransport)) {\n      this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n\n      this.transport = requestedTransport;\n      await this._startTransport(connectUrl, requestedTransferFormat);\n      this.connectionId = negotiateResponse.connectionId;\n      return;\n    }\n\n    const transportExceptions = [];\n    const transports = negotiateResponse.availableTransports || [];\n    let negotiate = negotiateResponse;\n\n    for (const endpoint of transports) {\n      const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n\n      if (transportOrError instanceof Error) {\n        // Store the error and continue, we don't want to cause a re-negotiate in these cases\n        transportExceptions.push(`${endpoint.transport} failed:`);\n        transportExceptions.push(transportOrError);\n      } else if (this._isITransport(transportOrError)) {\n        this.transport = transportOrError;\n\n        if (!negotiate) {\n          try {\n            negotiate = await this._getNegotiationResponse(url);\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n\n          connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n        }\n\n        try {\n          await this._startTransport(connectUrl, requestedTransferFormat);\n          this.connectionId = negotiate.connectionId;\n          return;\n        } catch (ex) {\n          this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n\n          negotiate = undefined;\n          transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n\n          if (this._connectionState !== \"Connecting\"\n          /* Connecting */\n          ) {\n            const message = \"Failed to select transport before stop() was called.\";\n\n            this._logger.log(LogLevel.Debug, message);\n\n            return Promise.reject(new Error(message));\n          }\n        }\n      }\n    }\n\n    if (transportExceptions.length > 0) {\n      return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n    }\n\n    return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n  }\n\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n\n    this.transport.onclose = e => this._stopConnection(e);\n\n    return this.transport.connect(url, transferFormat);\n  }\n\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\n    const transport = HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n\n            try {\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this._stopError || error;\n    this._stopError = undefined;\n\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n\n      return;\n    }\n\n    if (this._connectionState === \"Connecting\"\n    /* Connecting */\n    ) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n\n      this._sendQueue = undefined;\n    }\n\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (!Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n\n    return aTag.href;\n  }\n\n  _resolveNegotiateUrl(url) {\n    const index = url.indexOf(\"?\");\n    let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n    if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n      negotiateUrl += index === -1 ? \"?\" : \"&\";\n      negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\n    }\n\n    return negotiateUrl;\n  }\n\n}\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n\n  send(data) {\n    this._bufferData(data);\n\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n\n    return this._transportResult.promise;\n  }\n\n  stop() {\n    this._executing = false;\n\n    this._sendBufferedData.resolve();\n\n    return this._sendLoopPromise;\n  }\n\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n\n    this._buffer.push(data);\n\n    this._sendBufferedData.resolve();\n  }\n\n  async _sendLoop() {\n    while (true) {\n      await this._sendBufferedData.promise;\n\n      if (!this._executing) {\n        if (this._transportResult) {\n          this._transportResult.reject(\"Connection stopped.\");\n        }\n\n        break;\n      }\n\n      this._sendBufferedData = new PromiseSource();\n      const transportResult = this._transportResult;\n      this._transportResult = undefined;\n      const data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n      this._buffer.length = 0;\n\n      try {\n        await this._transport.send(data);\n        transportResult.resolve();\n      } catch (error) {\n        transportResult.reject(error);\n      }\n    }\n  }\n\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n\n    return result.buffer;\n  }\n\n}\n\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n\n  resolve() {\n    this._resolver();\n  }\n\n  reject(reason) {\n    this._rejecter(reason);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DefaultHttpClient","AggregateErrors","DisabledTransportError","FailedToNegotiateWithServerError","FailedToStartTransportError","HttpError","UnsupportedTransportError","HeaderNames","LogLevel","HttpTransportType","TransferFormat","LongPollingTransport","ServerSentEventsTransport","Arg","createLogger","getUserAgentHeader","Platform","WebSocketTransport","MAX_REDIRECTS","HttpConnection","constructor","url","options","isRequired","_logger","logger","baseUrl","_resolveUrl","logMessageContent","undefined","withCredentials","Error","timeout","webSocketModule","eventSourceModule","isNode","require","requireFunc","__webpack_require__","__non_webpack_require__","WebSocket","EventSource","_httpClient","httpClient","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","Binary","isIn","log","Debug","Promise","reject","_startInternalPromise","_startInternal","message","_stopPromise","send","data","_sendQueue","TransportSendQueue","transport","stop","error","resolve","_stopPromiseResolver","_stopInternal","_stopError","e","_stopConnection","_accessTokenFactory","accessTokenFactory","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","features","inherentKeepAlive","headers","token","Authorization","name","value","negotiateUrl","_resolveNegotiateUrl","response","post","content","statusCode","JSON","parse","negotiateVersion","connectionToken","connectionId","errorMessage","_createConnectUrl","indexOf","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","length","join","ServerSentEvents","LongPolling","connect","transportMatches","transferFormats","map","s","Warning","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","index","substring","_negotiateVersion","actualTransport","_transport","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","_executing","_buffer","transportResult","_concatBuffers","arrayBuffers","totalLength","b","byteLength","reduce","a","result","Uint8Array","offset","item","set","buffer","_resolver","_rejecter","reason"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/node_modules/@microsoft/signalr/src/HttpConnection.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}