{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\n/** @private */\n\nexport class WebSocketTransport {\n  constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\n    this._logger = logger;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logMessageContent = logMessageContent;\n    this._webSocketConstructor = webSocketConstructor;\n    this._httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n    this._headers = headers;\n  }\n\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n    this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n\n    if (this._accessTokenFactory) {\n      const token = await this._accessTokenFactory();\n\n      if (token) {\n        url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      url = url.replace(/^http/, \"ws\");\n      let webSocket;\n\n      const cookies = this._httpClient.getCookieString(url);\n\n      let opened = false;\n\n      if (Platform.isNode) {\n        const headers = {};\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n\n        if (cookies) {\n          headers[HeaderNames.Cookie] = `${cookies}`;\n        } // Only pass headers when in non-browser environments\n\n\n        webSocket = new this._webSocketConstructor(url, undefined, {\n          headers: { ...headers,\n            ...this._headers\n          }\n        });\n      }\n\n      if (!webSocket) {\n        // Chrome is not happy with passing 'undefined' as protocol\n        webSocket = new this._webSocketConstructor(url);\n      }\n\n      if (transferFormat === TransferFormat.Binary) {\n        webSocket.binaryType = \"arraybuffer\";\n      }\n\n      webSocket.onopen = _event => {\n        this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\n\n        this._webSocket = webSocket;\n        opened = true;\n        resolve();\n      };\n\n      webSocket.onerror = event => {\n        let error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n        if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n          error = event.error;\n        } else {\n          error = \"There was an error with the transport\";\n        }\n\n        this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\n      };\n\n      webSocket.onmessage = message => {\n        this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\n\n        if (this.onreceive) {\n          try {\n            this.onreceive(message.data);\n          } catch (error) {\n            this._close(error);\n\n            return;\n          }\n        }\n      };\n\n      webSocket.onclose = event => {\n        // Don't call close handler if connection was never established\n        // We'll reject the connect call instead\n        if (opened) {\n          this._close(event);\n        } else {\n          let error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n          if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n            error = event.error;\n          } else {\n            error = \"WebSocket failed to connect. The connection could not be found on the server,\" + \" either the endpoint may not be a SignalR endpoint,\" + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\" + \" If you have multiple servers check that sticky sessions are enabled.\";\n          }\n\n          reject(new Error(error));\n        }\n      };\n    });\n  }\n\n  send(data) {\n    if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\n      this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\n\n      this._webSocket.send(data);\n\n      return Promise.resolve();\n    }\n\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  }\n\n  stop() {\n    if (this._webSocket) {\n      // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n      this._close(undefined);\n    }\n\n    return Promise.resolve();\n  }\n\n  _close(event) {\n    // webSocket will be null if the transport did not start successfully\n    if (this._webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this._webSocket.onclose = () => {};\n\n      this._webSocket.onmessage = () => {};\n\n      this._webSocket.onerror = () => {};\n\n      this._webSocket.close();\n\n      this._webSocket = undefined;\n    }\n\n    this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n\n    if (this.onclose) {\n      if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\n      } else if (event instanceof Error) {\n        this.onclose(event);\n      } else {\n        this.onclose();\n      }\n    }\n  }\n\n  _isCloseEvent(event) {\n    return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\n  }\n\n}","map":{"version":3,"mappings":"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","names":["HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","WebSocketTransport","constructor","httpClient","accessTokenFactory","logger","logMessageContent","webSocketConstructor","headers","_logger","_accessTokenFactory","_logMessageContent","_webSocketConstructor","_httpClient","onreceive","onclose","_headers","connect","url","transferFormat","isRequired","isIn","log","Trace","token","indexOf","encodeURIComponent","Promise","resolve","reject","replace","webSocket","cookies","getCookieString","opened","isNode","name","value","Cookie","undefined","Binary","binaryType","onopen","_event","Information","_webSocket","onerror","event","error","ErrorEvent","onmessage","message","data","_close","Error","send","readyState","OPEN","stop","close","_isCloseEvent","wasClean","code","reason"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/node_modules/@microsoft/signalr/src/WebSocketTransport.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}