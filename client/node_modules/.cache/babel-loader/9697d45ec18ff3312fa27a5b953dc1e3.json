{"ast":null,"code":"var _jsxFileName = \"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/ChatMenu.jsx\";\nimport React, { useState } from \"react\";\nimport { AiOutlineFileText, AiOutlineSmile, AiOutlineStar, AiOutlineUserAdd } from \"react-icons/ai\";\nimport { getOtherUserInfo } from \"../../api/logic/getters\";\nimport Message from \"../message/Message\";\nimport \"./chatmenu.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatMenu(_ref) {\n  var _this = this;\n\n  let {\n    sendMessage,\n    receiveMessage,\n    selectedChannel,\n    setSelectedChannel,\n    currentUser,\n    isPrivate\n  } = _ref;\n  return function (receiveMessage) {\n    // const [messages, setMessages] = useState(selectedChannel.messages);\n    async function sendText() {\n      const text = document.querySelector(\"#message-area\").value;\n\n      if (text !== \"\") {\n        const currentDate = new Date();\n        const timestamp = `${currentDate.getHours()}:${currentDate.getMinutes()}:${currentDate.getSeconds()}`;\n        sendMessage(selectedChannel.name, currentUser.user.fullName, text);\n        document.querySelector(\"#message-area\").value = \"\";\n        setSelectedChannel(selectedChannel => {\n          const copyChannel = Object.assign({}, selectedChannel);\n\n          if (copyChannel.messages !== null) {\n            copyChannel.messages = [...[{\n              text: text,\n              senderId: currentUser.user.id,\n              senderName: currentUser.user.fullName,\n              timestamp: timestamp\n            }], ...copyChannel.messages];\n          } else {\n            copyChannel.messages = [{\n              text: text,\n              senderId: currentUser.user.id,\n              senderName: currentUser.user.fullName,\n              timestamp: timestamp\n            }];\n          }\n\n          return copyChannel;\n        });\n      }\n    }\n\n    async function receiveMessage(message) {\n      console.log(message);\n      setSelectedChannel(selectedChannel => {\n        const copyChannel = Object.assign({}, selectedChannel);\n        copyChannel.messages = [...[{\n          text: message.content,\n          senderId: message.fromId,\n          senderName: message.from,\n          timestamp: message.timestamp\n        }], ...copyChannel.messages];\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: isPrivate ? getOtherUserInfo(selectedChannel, currentUser.id).name : selectedChannel.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: selectedChannel.messages !== null && selectedChannel.messages.map(message => {\n            return /*#__PURE__*/_jsxDEV(Message, {\n              message: message,\n              currentUser: currentUser\n            }, Math.random() * 100, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messenger\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"message\",\n            id: \"message-area\",\n            cols: \"30\",\n            rows: \"1\",\n            placeholder: \"Type your message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-tools\",\n              children: [/*#__PURE__*/_jsxDEV(AiOutlineFileText, {\n                size: 20,\n                color: \"#6A7681\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(AiOutlineUserAdd, {\n                size: 20,\n                color: \"#6A7681\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(AiOutlineSmile, {\n                size: 20,\n                color: \"#6A7681\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: sendText,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, _this);\n  }(receiveMessage);\n}\n_c = ChatMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMenu\");","map":{"version":3,"names":["React","useState","AiOutlineFileText","AiOutlineSmile","AiOutlineStar","AiOutlineUserAdd","getOtherUserInfo","Message","ChatMenu","sendMessage","receiveMessage","selectedChannel","setSelectedChannel","currentUser","isPrivate","sendText","text","document","querySelector","value","currentDate","Date","timestamp","getHours","getMinutes","getSeconds","name","user","fullName","copyChannel","Object","assign","messages","senderId","id","senderName","message","console","log","content","fromId","from","map","Math","random"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/menu/ChatMenu.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AiOutlineFileText, AiOutlineSmile, AiOutlineStar, AiOutlineUserAdd } from \"react-icons/ai\";\nimport { getOtherUserInfo } from \"../../api/logic/getters\";\nimport Message from \"../message/Message\";\nimport \"./chatmenu.css\";\n\nexport default function ChatMenu({ sendMessage, receiveMessage, selectedChannel, setSelectedChannel, currentUser, isPrivate }) {\n\n    // const [messages, setMessages] = useState(selectedChannel.messages);\n\n    async function sendText(){\n        const text = document.querySelector(\"#message-area\").value;\n        \n        if(text !== \"\"){\n            const currentDate = new Date();\n            const timestamp = `${currentDate.getHours()}:${currentDate.getMinutes()}:${currentDate.getSeconds()}`;\n            \n            sendMessage(selectedChannel.name, currentUser.user.fullName, text);\n\n            document.querySelector(\"#message-area\").value = \"\";\n            setSelectedChannel(selectedChannel => {\n                const copyChannel = Object.assign({}, selectedChannel);\n                if (copyChannel.messages !== null){\n                    copyChannel.messages = [...[{text: text, senderId: currentUser.user.id, senderName: currentUser.user.fullName, timestamp:timestamp}], ...copyChannel.messages];\n                } else {\n                    copyChannel.messages = [{text: text, senderId: currentUser.user.id, senderName: currentUser.user.fullName, timestamp:timestamp}]   \n                }\n                return copyChannel;    \n            });\n        }\n    }\n\n    async function receiveMessage(message){\n        console.log(message);\n\n        setSelectedChannel(selectedChannel => {\n            const copyChannel = Object.assign({}, selectedChannel);\n            copyChannel.messages = [...[{text: message.content, senderId: message.fromId, senderName:message.from, timestamp:message.timestamp}], ...copyChannel.messages];\n        })\n    }\n\n    return(\n        <div className=\"chat-menu\">\n            <header>\n                <h1>{ isPrivate ? getOtherUserInfo(selectedChannel, currentUser.id).name : selectedChannel.name}</h1>\n            </header>\n            <div className=\"chat-field\">\n                <div className=\"messages\">\n                    {selectedChannel.messages !== null && \n                    selectedChannel.messages.map((message) => {\n                        return (\n                            <Message key={Math.random()*100} message={message} currentUser={currentUser}/>\n                        )})\n                    }\n                </div>\n                <div className=\"messenger\">\n                    <textarea name=\"message\" id=\"message-area\" cols=\"30\" rows=\"1\" placeholder=\"Type your message\"></textarea>\n                    <div className=\"message-panel\">\n                        <div className=\"message-tools\">\n                            <AiOutlineFileText size={20} color=\"#6A7681\"></AiOutlineFileText>\n                            <AiOutlineUserAdd size={20} color=\"#6A7681\"></AiOutlineUserAdd>\n                            <AiOutlineSmile size={20} color=\"#6A7681\"></AiOutlineSmile>\n                        </div>\n                        <button onClick={sendText}>Send</button>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n   )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}