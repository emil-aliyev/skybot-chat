{"ast":null,"code":"export default class ConnectionController {\n  constructor(connection) {\n    this.subscribeEvent = signalrEvents => {\n      console.log(signalrEvents);\n\n      signalrEvents.invoke.fn = async args => {\n        console.log(signalrEvents.invokeEventName, args, 'trrwerwfwf');\n        return await this.connection.invoke(signalrEvents.invokeEventName, ...args);\n      };\n\n      this.connection.on(signalrEvents.onEventName, signalrEvents.on);\n    };\n\n    this.connection = connection;\n  } // sendMessage = async (channel, user, message) => {\n  //     try {\n  //       await this.connection.invoke(\"SendToRoom\", channel, user, message);\n  //     } catch (err) {\n  //       console.log(err);\n  //     }\n  // }    \n  // getAllUsers = async () => {\n  //     //CONVERT THIS INTO AN API CALL\n  //     try {\n  //         await connection.invoke(\"GetAllUsers\");\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // addToGroup = async (channelName, userName) => {\n  //     try {\n  //         await connection.invoke(\"Join\", channelName, userName);\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // removeUser = async (channelName, userId, channelId) => {\n  //     try {\n  //         await connection.invoke(\"Remove\", channelName, userId, channelId);\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // onAddChannelSubscribe = (fn) => {\n  //     this.onAddChannel = fn;\n  // }\n  // onErrorSubscribe = (fn) => {\n  //     this.onError = fn;\n  // }\n  // onRecieveMessageSubscribe = (fn) => {\n  //     this.onRecieveMessage = fn;\n  // }\n  // #subscribeEvents = (event) => {\n  //     this.connection.on(\"addChannel\", this.onAddChannel);\n  //     this.connection.on(\"onError\", this.onError);\n  //     this.connection.on(\"recieveMessage\", this.onRecieveMessage);\n  // }\n\n\n}","map":{"version":3,"names":["ConnectionController","constructor","connection","subscribeEvent","signalrEvents","console","log","invoke","fn","args","invokeEventName","on","onEventName"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/ConnectionController.js"],"sourcesContent":["export default class ConnectionController {\n    constructor(connection) {\n        this.connection = connection;\n    }\n    subscribeEvent = (signalrEvents) => {\n        console.log(signalrEvents)\n        signalrEvents.invoke.fn = async (args) => {\n            console.log(signalrEvents.invokeEventName, args, 'trrwerwfwf')\n            return await this.connection.invoke(signalrEvents.invokeEventName, ...args);\n        } \n\n        this.connection.on(signalrEvents.onEventName, signalrEvents.on);\n    }\n\n    // sendMessage = async (channel, user, message) => {\n    //     try {\n    //       await this.connection.invoke(\"SendToRoom\", channel, user, message);\n    //     } catch (err) {\n    //       console.log(err);\n    //     }\n    // }    \n\n    // getAllUsers = async () => {\n    //     //CONVERT THIS INTO AN API CALL\n    //     try {\n    //         await connection.invoke(\"GetAllUsers\");\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // addToGroup = async (channelName, userName) => {\n    //     try {\n    //         await connection.invoke(\"Join\", channelName, userName);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // removeUser = async (channelName, userId, channelId) => {\n    //     try {\n    //         await connection.invoke(\"Remove\", channelName, userId, channelId);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // onAddChannelSubscribe = (fn) => {\n    //     this.onAddChannel = fn;\n    // }\n\n    // onErrorSubscribe = (fn) => {\n    //     this.onError = fn;\n\n    // }\n    // onRecieveMessageSubscribe = (fn) => {\n    //     this.onRecieveMessage = fn;\n    // }\n    \n    // #subscribeEvents = (event) => {\n    //     this.connection.on(\"addChannel\", this.onAddChannel);\n    //     this.connection.on(\"onError\", this.onError);\n    //     this.connection.on(\"recieveMessage\", this.onRecieveMessage);\n    // }\n}\n\n"],"mappings":"AAAA,eAAe,MAAMA,oBAAN,CAA2B;EACtCC,WAAW,CAACC,UAAD,EAAa;IAAA,KAGxBC,cAHwB,GAGNC,aAAD,IAAmB;MAChCC,OAAO,CAACC,GAAR,CAAYF,aAAZ;;MACAA,aAAa,CAACG,MAAd,CAAqBC,EAArB,GAA0B,MAAOC,IAAP,IAAgB;QACtCJ,OAAO,CAACC,GAAR,CAAYF,aAAa,CAACM,eAA1B,EAA2CD,IAA3C,EAAiD,YAAjD;QACA,OAAO,MAAM,KAAKP,UAAL,CAAgBK,MAAhB,CAAuBH,aAAa,CAACM,eAArC,EAAsD,GAAGD,IAAzD,CAAb;MACH,CAHD;;MAKA,KAAKP,UAAL,CAAgBS,EAAhB,CAAmBP,aAAa,CAACQ,WAAjC,EAA8CR,aAAa,CAACO,EAA5D;IACH,CAXuB;;IACpB,KAAKT,UAAL,GAAkBA,UAAlB;EACH,CAHqC,CActC;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;;AA/DsC"},"metadata":{},"sourceType":"module"}