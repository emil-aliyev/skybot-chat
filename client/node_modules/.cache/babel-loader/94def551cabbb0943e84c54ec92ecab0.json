{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// Not exported from index\n\n/** @private */\nexport class TextMessageFormat {\n  static write(output) {\n    return `${output}${TextMessageFormat.RecordSeparator}`;\n  }\n\n  static parse(input) {\n    if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n      throw new Error(\"Message is incomplete.\");\n    }\n\n    const messages = input.split(TextMessageFormat.RecordSeparator);\n    messages.pop();\n    return messages;\n  }\n\n}\nTextMessageFormat.RecordSeparatorCode = 0x1e;\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);","map":{"version":3,"mappings":"AAAA;AACA;AAEA;;AACA;AACA,OAAM,MAAOA,iBAAP,CAAwB;EAIP,OAALC,KAAK,CAACC,MAAD,EAAe;IAC9B,OAAO,GAAGA,MAAM,GAAGF,iBAAiB,CAACG,eAAe,EAApD;EACH;;EAEkB,OAALC,KAAK,CAACC,KAAD,EAAc;IAC7B,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAL,KAA4BN,iBAAiB,CAACG,eAAlD,EAAmE;MAC/D,MAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;IACH;;IAED,MAAMC,QAAQ,GAAGH,KAAK,CAACI,KAAN,CAAYT,iBAAiB,CAACG,eAA9B,CAAjB;IACAK,QAAQ,CAACE,GAAT;IACA,OAAOF,QAAP;EACH;;AAhByB;AACZR,wCAAsB,IAAtB;AACAA,oCAAkBW,MAAM,CAACC,YAAP,CAAoBZ,iBAAiB,CAACa,mBAAtC,CAAlB","names":["TextMessageFormat","write","output","RecordSeparator","parse","input","length","Error","messages","split","pop","String","fromCharCode","RecordSeparatorCode"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/node_modules/@microsoft/signalr/src/TextMessageFormat.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}