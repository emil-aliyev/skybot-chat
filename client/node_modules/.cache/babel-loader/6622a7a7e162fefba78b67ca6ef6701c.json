{"ast":null,"code":"import { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { onAddChannel, onError, onRecieveMessage } from './onFunctions';\nimport { URL } from './serverUrl';\nexport default async function connect() {\n  const connection = new HubConnectionBuilder().withUrl(`${URL}/chatHub`).configureLogging(LogLevel.Information).withAutomaticReconnect(2000).build();\n  await connection.start();\n  return connection;\n}\n/*\n connection.on(\"RecieveMessage\", (message) => {\n            console.log(\"New message: \", message);\n            console.log(\"After new mssage: \", channels);\n            const copyChannel = {...channels.filter(room => room.id === message.toRoomId)[0]}\n            if (copyChannel.messages !== null){\n                copyChannel.messages.push(message);\n            } else {\n                copyChannel.messages = [message];\n            }\n            \n            const newChannels = channels.map(channel => {\n                if (channel.id !== copyChannel.id){\n                    return channel;\n                } else {\n                    return copyChannel;\n                }\n            });\n            setChannels(channels => newChannels);\n        }\n*/","map":{"version":3,"names":["HubConnectionBuilder","LogLevel","onAddChannel","onError","onRecieveMessage","URL","connect","connection","withUrl","configureLogging","Information","withAutomaticReconnect","build","start"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/api/Connector.js"],"sourcesContent":["import { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { onAddChannel, onError, onRecieveMessage } from './onFunctions';\nimport { URL } from './serverUrl';\n\nexport default async function connect() {\n    const connection = new HubConnectionBuilder()\n        .withUrl(`${URL}/chatHub`)\n        .configureLogging(LogLevel.Information)\n        .withAutomaticReconnect(2000)\n        .build();\n\n    await connection.start();\n\n    return connection;\n}\n\n\n\n/*\n connection.on(\"RecieveMessage\", (message) => {\n            console.log(\"New message: \", message);\n            console.log(\"After new mssage: \", channels);\n            const copyChannel = {...channels.filter(room => room.id === message.toRoomId)[0]}\n            if (copyChannel.messages !== null){\n                copyChannel.messages.push(message);\n            } else {\n                copyChannel.messages = [message];\n            }\n            \n            const newChannels = channels.map(channel => {\n                if (channel.id !== copyChannel.id){\n                    return channel;\n                } else {\n                    return copyChannel;\n                }\n            });\n            setChannels(channels => newChannels);\n        }\n*/"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,QAA/B,QAA+C,oBAA/C;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,gBAAhC,QAAwD,eAAxD;AACA,SAASC,GAAT,QAAoB,aAApB;AAEA,eAAe,eAAeC,OAAf,GAAyB;EACpC,MAAMC,UAAU,GAAG,IAAIP,oBAAJ,GACdQ,OADc,CACL,GAAEH,GAAI,UADD,EAEdI,gBAFc,CAEGR,QAAQ,CAACS,WAFZ,EAGdC,sBAHc,CAGS,IAHT,EAIdC,KAJc,EAAnB;EAMA,MAAML,UAAU,CAACM,KAAX,EAAN;EAEA,OAAON,UAAP;AACH;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}