{"ast":null,"code":"var _jsxFileName = \"/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport connect from \"../../api/Connector\";\nimport { ConnectionController, SignalrEvents } from \"../../api/ConnectionController\";\nimport Sidebar from \"../sidebar/Sidebar\";\nimport ChatLobby from '../lobby/ChatLobby'; // const addChannelEvent = new SignalrEvents('addChannel', 'onAddChannel');\n// connectionController.subscribeEvent(addChannelEvent);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatPage(_ref) {\n  _s();\n\n  let {\n    currentUser\n  } = _ref;\n  const [channels, setChannels] = useState(currentUser.roomExistUsers);\n  const [selectedChannel, setSelectedChannel] = useState({});\n  const [connectionController, setConnectionController] = useState();\n  useEffect(() => {\n    const getConnection = connect();\n    getConnection.then(connection => {\n      const connectionController = new ConnectionController(connection);\n      setConnectionController(connectionController);\n    }).catch(() => alert('connection failed'));\n  }, []); // useEffect(() => {\n  //     console.log(\"Connection!\")\n  //     const connect = async () => {\n  //         try {\n  //             const connection = new HubConnectionBuilder()\n  //             .withUrl(`${URL}/chatHub`)\n  //             .configureLogging(LogLevel.Information)\n  //             .withAutomaticReconnect(2000)\n  //             .build();\n  //             connection.on(\"AddChannel\", (channel) => console.log(channel));\n  //             connection.on(\"onError\", (msg) => console.log(msg));\n  //             connection.on(\"RecieveMessage\", (message) => {\n  //                 console.log(\"New message: \", message);\n  //                 console.log(\"After new mssage: \", channels);\n  //                 const copyChannel = {...channels.filter(room => room.id === message.toRoomId)[0]}\n  //                 if (copyChannel.messages !== null){\n  //                     copyChannel.messages.push(message);\n  //                 } else {\n  //                     copyChannel.messages = [message];\n  //                 }\n  //                 const newChannels = channels.map(channel => {\n  //                     if (channel.id !== copyChannel.id){\n  //                         return channel;\n  //                     } else {\n  //                         return copyChannel;\n  //                     }\n  //                 });\n  //                 setChannels(channels => newChannels);\n  //             });\n  //             connection.onclose(e => {\n  //                 setConnection();\n  //             });\n  //             await connection.start();\n  //             setConnection(connection);\n  //             console.log(\"connection id: \", connection.ConnectionId);\n  //         } catch (err) {\n  //             console.log(err);\n  //         };\n  //     };\n  //     connect().catch(console.error);\n  //   }, [])\n  // const createChannel = async (channel, user, members) => {\n  //     try {\n  //         const room = await connection.invoke(\"CreateRoom\", channel, user, members);\n  //         console.log(\"New room: \", room);\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // const sendMessage = async (channel, user, message) => {\n  //     try {\n  //       await connection.invoke(\"SendToRoom\", channel, user, message);\n  //     } catch (err) {\n  //       console.log(err);\n  //     }\n  // }    \n  // const getAllUsers = async () => {\n  //     try {\n  //         const data = await connection.invoke(\"GetAllUsers\");\n  //         return data;\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // const addToGroup = async (channelName, userName) => {\n  //     try {\n  //         await connection.invoke(\"Join\", channelName, userName);\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n  // const removeUser = async (channelName, userId, channelId) => {\n  //     try {\n  //         await connection.invoke(\"Remove\", channelName, userId, channelId);\n  //     } catch (err) {\n  //         console.log(err);\n  //     }\n  // }\n\n  /*      // sendMessage={sendMessage}\n          // getAllUsers={getAllUsers}\n          // addToGroup={addToGroup}\n          // removeUser={removeUser}/>*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatLobby, {\n      currentUser: currentUser,\n      channels: channels,\n      setChannels: setChannels // users={users}\n      // setUsers={setUsers}\n      ,\n      selectedChannel: selectedChannel,\n      setSelectedChannel: setSelectedChannel,\n      createChannel: createChannel,\n      connectionController: connectionController\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChatPage, \"6u05jI61lSD1KJFphOTpvQCxmLE=\");\n\n_c = ChatPage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","connect","ConnectionController","SignalrEvents","Sidebar","ChatLobby","ChatPage","currentUser","channels","setChannels","roomExistUsers","selectedChannel","setSelectedChannel","connectionController","setConnectionController","getConnection","then","connection","catch","alert","createChannel"],"sources":["/home/emil/Desktop/skybot-chat/skybot-chat/client/src/components/page/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\n\nimport connect from \"../../api/Connector\";\nimport {ConnectionController, SignalrEvents} from \"../../api/ConnectionController\";\n\nimport Sidebar from \"../sidebar/Sidebar\";\nimport ChatLobby from '../lobby/ChatLobby';\n\n// const addChannelEvent = new SignalrEvents('addChannel', 'onAddChannel');\n// connectionController.subscribeEvent(addChannelEvent);\n\n\nexport default function ChatPage({ currentUser }){\n\n    const [channels, setChannels] = useState(currentUser.roomExistUsers);\n    const [selectedChannel, setSelectedChannel] = useState({});   \n    const [connectionController, setConnectionController] = useState();\n\n    useEffect(() => {\n        const getConnection = connect();\n\n        getConnection.then((connection) => {\n            const connectionController = new ConnectionController(connection);\n\n            setConnectionController(connectionController);\n        }).catch(() => alert('connection failed'));\n\n    }, [])\n\n\n\n    // useEffect(() => {\n    //     console.log(\"Connection!\")\n    //     const connect = async () => {\n    //         try {\n    //             const connection = new HubConnectionBuilder()\n    //             .withUrl(`${URL}/chatHub`)\n    //             .configureLogging(LogLevel.Information)\n    //             .withAutomaticReconnect(2000)\n    //             .build();\n    \n    //             connection.on(\"AddChannel\", (channel) => console.log(channel));\n\n    //             connection.on(\"onError\", (msg) => console.log(msg));\n\n    //             connection.on(\"RecieveMessage\", (message) => {\n    //                 console.log(\"New message: \", message);\n    //                 console.log(\"After new mssage: \", channels);\n    //                 const copyChannel = {...channels.filter(room => room.id === message.toRoomId)[0]}\n    //                 if (copyChannel.messages !== null){\n    //                     copyChannel.messages.push(message);\n    //                 } else {\n    //                     copyChannel.messages = [message];\n    //                 }\n                    \n    //                 const newChannels = channels.map(channel => {\n    //                     if (channel.id !== copyChannel.id){\n    //                         return channel;\n    //                     } else {\n    //                         return copyChannel;\n    //                     }\n    //                 });\n    //                 setChannels(channels => newChannels);\n    //             });\n\n    //             connection.onclose(e => {\n    //                 setConnection();\n    //             });\n                \n    //             await connection.start();\n    //             setConnection(connection);\n    //             console.log(\"connection id: \", connection.ConnectionId);\n    //         } catch (err) {\n    //             console.log(err);\n    //         };\n    //     };\n      \n    //     connect().catch(console.error);\n    //   }, [])\n\n    // const createChannel = async (channel, user, members) => {\n    //     try {\n    //         const room = await connection.invoke(\"CreateRoom\", channel, user, members);\n    //         console.log(\"New room: \", room);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const sendMessage = async (channel, user, message) => {\n    //     try {\n    //       await connection.invoke(\"SendToRoom\", channel, user, message);\n    //     } catch (err) {\n    //       console.log(err);\n    //     }\n    // }    \n\n    // const getAllUsers = async () => {\n    //     try {\n    //         const data = await connection.invoke(\"GetAllUsers\");\n    //         return data;\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const addToGroup = async (channelName, userName) => {\n    //     try {\n    //         await connection.invoke(\"Join\", channelName, userName);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const removeUser = async (channelName, userId, channelId) => {\n    //     try {\n    //         await connection.invoke(\"Remove\", channelName, userId, channelId);\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    /*      // sendMessage={sendMessage}\n            // getAllUsers={getAllUsers}\n            // addToGroup={addToGroup}\n            // removeUser={removeUser}/>*/\n\n    return(\n        <>\n            <Sidebar/>\n            <ChatLobby \n                currentUser={currentUser}\n                channels={channels}\n                setChannels={setChannels}\n                // users={users}\n                // setUsers={setUsers}\n                selectedChannel={selectedChannel}\n                setSelectedChannel={setSelectedChannel}\n                createChannel={createChannel}\n                connectionController={connectionController}/>\n        </>\n    );\n};"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,oBAAR,EAA8BC,aAA9B,QAAkD,gCAAlD;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAEA;AACA;;;;AAGA,eAAe,SAASC,QAAT,OAAkC;EAAA;;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EAE7C,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACQ,WAAW,CAACG,cAAb,CAAxC;EACA,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAACc,oBAAD,EAAuBC,uBAAvB,IAAkDf,QAAQ,EAAhE;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMe,aAAa,GAAGd,OAAO,EAA7B;IAEAc,aAAa,CAACC,IAAd,CAAoBC,UAAD,IAAgB;MAC/B,MAAMJ,oBAAoB,GAAG,IAAIX,oBAAJ,CAAyBe,UAAzB,CAA7B;MAEAH,uBAAuB,CAACD,oBAAD,CAAvB;IACH,CAJD,EAIGK,KAJH,CAIS,MAAMC,KAAK,CAAC,mBAAD,CAJpB;EAMH,CATQ,EASN,EATM,CAAT,CAN6C,CAmB7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACJ;AACA;AACA;;EAEI,oBACI;IAAA,wBACI,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,SAAD;MACI,WAAW,EAAEZ,WADjB;MAEI,QAAQ,EAAEC,QAFd;MAGI,WAAW,EAAEC,WAHjB,CAII;MACA;MALJ;MAMI,eAAe,EAAEE,eANrB;MAOI,kBAAkB,EAAEC,kBAPxB;MAQI,aAAa,EAAEQ,aARnB;MASI,oBAAoB,EAAEP;IAT1B;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA,gBADJ;AAeH;;GAlIuBP,Q;;KAAAA,Q;AAkIvB"},"metadata":{},"sourceType":"module"}